{"version":3,"sources":["components/MovieCard/MovieCard.js","components/MoviesList/MoviesList.js","props/FormInputProps.js","components/FormInput/FormInput.js","props/NewMovieProps.js","components/NewMovie/NewMovie.js","App.js","index.js"],"names":["MovieCard","title","description","imgUrl","imdbUrl","className","src","alt","href","defaultProps","MoviesList","movies","map","movie","key","imdbId","FormInputProps","name","PropTypes","string","isRequired","value","handleChange","func","handleBlur","isValid","bool","FormInput","React","memo","toUpperCase","slice","placeholder","classNames","onChange","onBlur","aria-describedby","autoComplete","id","propTypes","regex","NewMovie","state","values","controlers","isValidTitle","isValidImgUrl","isValidImdbUrl","isValidImdbId","event","target","setState","handleSubmit","preventDefault","props","addMovie","controler","Object","prototype","hasOwnProperty","call","includes","test","hasFailedControlers","some","this","onSubmit","type","disabled","Component","App","moviesFromServer","ReactDOM","render","document","getElementById"],"mappings":"gxEAIaA,G,kBAAY,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAOC,EAAV,EAAUA,YAAaC,EAAvB,EAAuBA,OAAQC,EAA/B,EAA+BA,QAA/B,OACvB,yBAAKC,UAAU,QACb,yBAAKA,UAAU,cACb,4BAAQA,UAAU,iBAChB,yBACEC,IAAKH,EACLI,IAAI,gBAIV,yBAAKF,UAAU,gBACb,yBAAKA,UAAU,SACb,yBAAKA,UAAU,cACb,4BAAQA,UAAU,kBAChB,yBACEC,IAAI,wBACJC,IAAI,WAIV,yBAAKF,UAAU,iBACb,uBAAGA,UAAU,cAAcJ,KAI/B,yBAAKI,UAAU,WACZH,EACD,6BACA,uBAAGM,KAAMJ,GAAT,aAaRJ,EAAUS,aAAe,CACvBP,YAAa,ICxCR,IAAMQ,EAAa,SAAC,GAAD,IAAGC,EAAH,EAAGA,OAAH,OACxB,yBAAKN,UAAU,UACZM,EAAOC,KAAI,SAAAC,GAAK,OACf,kBAAC,EAAD,eAAWC,IAAKD,EAAME,QAAYF,SAgBxCH,EAAWD,aAAe,CACxBE,OAAQ,I,2DCxBGK,EAAiB,CAC5BC,KAAMC,IAAUC,OAAOC,WACvBC,MAAOH,IAAUC,OACjBG,aAAcJ,IAAUK,KAAKH,WAC7BI,WAAYN,IAAUK,KAAKH,WAC3BK,QAASP,IAAUQ,MCHRC,EAAYC,IAAMC,MAAK,gBAClCZ,EADkC,EAClCA,KACAI,EAFkC,EAElCA,MACAC,EAHkC,EAGlCA,aACAE,EAJkC,EAIlCA,WACAC,EALkC,EAKlCA,QALkC,OAOlC,6BACE,2BAAOpB,UAAU,kBACdY,EAAK,GAAGa,cAAgBb,EAAKc,MAAM,GACpC,2BACEd,KAAMA,EACNe,YAAW,gBAAWf,GACtBZ,UAAW4B,IAAW,eAAgB,CACpC,cAAeR,IAEjBJ,MAAOA,EACPa,SAAUZ,EACVa,OAAQX,EACRY,mBAAiB,qBACjBC,aAAa,QAEf,yBAAKC,GAAG,qBAAqBjC,UAAU,oBAAvC,mCAONsB,EAAUY,UAAYvB,EAEtBW,EAAUlB,aAAe,CACvBY,MAAO,GACPI,SAAS,GClCCP,IAAUK,KAAKH,WADpB,ICKDoB,EAAQ,qKAEDC,EAAb,4MACEC,MAAQ,CACNC,OAAQ,CACN1C,MAAO,GACPC,YAAa,GACbC,OAAQ,GACRC,QAAS,GACTW,OAAQ,IAEV6B,WAAY,CACVC,cAAc,EACdC,eAAe,EACfC,gBAAgB,EAChBC,eAAe,IAbrB,EAiBE1B,aAAe,SAAC2B,GAAW,IAAD,EACAA,EAAMC,OAAtB7B,EADgB,EAChBA,MAAOJ,EADS,EACTA,KAEf,EAAKkC,UAAS,SAAAT,GAAK,MAAK,CACtBC,OAAO,2BACFD,EAAMC,QADL,kBAEH1B,EAAOI,SAvBhB,EA4BE+B,aAAe,SAACH,GACdA,EAAMI,iBAEN,EAAKC,MAAMC,SAAS,EAAKb,MAAMC,QAE/B,EAAKQ,SAAS,CACZR,OAAQ,CACN1C,MAAO,GACPC,YAAa,GACbC,OAAQ,GACRC,QAAS,GACTW,OAAQ,OAvChB,EA4CES,WAAa,SAACyB,GAAW,IAAD,EACEA,EAAMC,OAAtBjC,EADc,EACdA,KAAMI,EADQ,EACRA,MACNuB,EAAe,EAAKF,MAApBE,WACFY,EAAS,iBAAavC,EAAK,GAAGa,eAArB,OAAqCb,EAAKc,MAAM,IAC3C0B,OACjBC,UACAC,eACAC,KAAKhB,EAAYY,IAMpB,EAAKL,UAAS,SAAAT,GAAK,MAAK,CACtBE,WAAW,2BACNF,EAAME,YADD,kBAEPY,EAAYA,EAAUK,SAAS,OAC5BrB,EAAMsB,KAAKzC,MAAYA,IACrBA,SA9Dd,EAmEE0C,oBAAsB,WACpB,OAAON,OAAOd,OAAO,EAAKD,MAAME,YAAYoB,MAAK,SAAA3C,GAAK,OAAKA,MApE/D,uDAuEY,IAAD,EAeH4C,KAAKvB,MAfF,IAELE,WACEC,EAHG,EAGHA,aACAC,EAJG,EAIHA,cACAC,EALG,EAKHA,eACAC,EANG,EAMHA,cANG,IAQLL,OACE1C,EATG,EASHA,MACAC,EAVG,EAUHA,YACAC,EAXG,EAWHA,OACAC,EAZG,EAYHA,QACAW,EAbG,EAaHA,OAIJ,OACE,0BAAMmD,SAAUD,KAAKb,cACnB,wBAAI/C,UAAU,kBAAd,YACA,kBAACsB,EAAD,CACEV,KAAK,QACLI,MAAOpB,EACPqB,aAAc2C,KAAK3C,aACnBE,WAAYyC,KAAKzC,WACjBC,QAASoB,IAEX,kBAAClB,EAAD,CACEV,KAAK,cACLI,MAAOnB,EACPoB,aAAc2C,KAAK3C,aACnBE,WAAYyC,KAAKzC,aAEnB,kBAACG,EAAD,CACEV,KAAK,SACLI,MAAOlB,EACPmB,aAAc2C,KAAK3C,aACnBE,WAAYyC,KAAKzC,WACjBC,QAASqB,IAEX,kBAACnB,EAAD,CACEV,KAAK,UACLI,MAAOjB,EACPkB,aAAc2C,KAAK3C,aACnBE,WAAYyC,KAAKzC,WACjBC,QAASsB,IAEX,kBAACpB,EAAD,CACEV,KAAK,SACLI,MAAON,EACPO,aAAc2C,KAAK3C,aACnBE,WAAYyC,KAAKzC,WACjBC,QAASuB,IAGX,4BACEmB,KAAK,SACL9D,UAAU,iCACV+D,UACGrD,IACGX,IACAD,IACAF,GACDgE,KAAKF,uBARZ,iBA9HR,GAA8BM,a,QCHjBC,EAAb,4MACE5B,MAAQ,CACN/B,OAAQ4D,GAFZ,EAKEhB,SAAW,SAAC1C,GACV,EAAKsC,UAAS,SAAAT,GAAK,MAAK,CACtB/B,OAAO,GAAD,mBAAM+B,EAAM/B,QAAZ,CAAoBE,SAPhC,uDAWY,IACAF,EAAWsD,KAAKvB,MAAhB/B,OAER,OACE,yBAAKN,UAAU,QACb,yBAAKA,UAAU,gBACb,kBAAC,EAAD,CAAYM,OAAQA,KAEtB,yBAAKN,UAAU,WACb,kBAAC,EAAD,CAAUkD,SAAUU,KAAKV,iBApBnC,GAAyBc,aCDzBG,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.c235d03b.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport './MovieCard.scss';\n\nexport const MovieCard = ({ title, description, imgUrl, imdbUrl }) => (\n  <div className=\"card\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          src={imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\">{title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\">\n        {description}\n        <br />\n        <a href={imdbUrl}>IMDB</a>\n      </div>\n    </div>\n  </div>\n);\n\nMovieCard.propTypes = {\n  title: PropTypes.string.isRequired,\n  description: PropTypes.string,\n  imgUrl: PropTypes.string.isRequired,\n  imdbUrl: PropTypes.string.isRequired,\n};\n\nMovieCard.defaultProps = {\n  description: '',\n};\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport './MoviesList.scss';\r\nimport { MovieCard } from '../MovieCard';\r\n\r\nexport const MoviesList = ({ movies }) => (\r\n  <div className=\"movies\">\r\n    {movies.map(movie => (\r\n      <MovieCard key={movie.imdbId} {...movie} />\r\n    ))}\r\n  </div>\r\n);\r\n\r\nMoviesList.propTypes = {\r\n  movies: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      title: PropTypes.string.isRequired,\r\n      description: PropTypes.string,\r\n      imgUrl: PropTypes.string.isRequired,\r\n      imdbUrl: PropTypes.string.isRequired,\r\n    }),\r\n  ),\r\n};\r\n\r\nMoviesList.defaultProps = {\r\n  movies: [],\r\n};\r\n","import PropTypes from 'prop-types';\n\nexport const FormInputProps = {\n  name: PropTypes.string.isRequired,\n  value: PropTypes.string,\n  handleChange: PropTypes.func.isRequired,\n  handleBlur: PropTypes.func.isRequired,\n  isValid: PropTypes.bool,\n};\n","import React from 'react';\nimport classNames from 'classnames';\nimport { FormInputProps } from '../../props/FormInputProps';\n\nexport const FormInput = React.memo(({\n  name,\n  value,\n  handleChange,\n  handleBlur,\n  isValid,\n}) => (\n  <div>\n    <label className=\"form-group row\">\n      {name[0].toUpperCase() + name.slice(1)}\n      <input\n        name={name}\n        placeholder={`Enter ${name}`}\n        className={classNames('form-control', {\n          'is-invalid': !isValid,\n        })}\n        value={value}\n        onChange={handleChange}\n        onBlur={handleBlur}\n        aria-describedby=\"validationFeedback\"\n        autoComplete=\"off\"\n      />\n      <div id=\"validationFeedback\" className=\"invalid-feedback\">\n        Please enter a valid state\n      </div>\n    </label>\n  </div>\n));\n\nFormInput.propTypes = FormInputProps;\n\nFormInput.defaultProps = {\n  value: '',\n  isValid: true,\n};\n","import PropTypes from 'prop-types';\n\nexport const NewMovieProps = {\n  addMovie: PropTypes.func.isRequired,\n};\n","import React, { Component } from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nimport { FormInput } from '../FormInput';\nimport { NewMovieProps } from '../../props/NewMovieProps';\n\n// eslint-disable-next-line max-len\nconst regex = /^((([A-Za-z]{3,9}:(?:\\/\\/)?)(?:[-;:&=+$,\\w]+@)?[A-Za-z0-9.-]+|(?:www\\.|[-;:&=+$,\\w]+@)[A-Za-z0-9.-]+)((?:\\/[+~%/.\\w-_]*)?\\??(?:[-+=&;%@.\\w_]*)#?(?:[.!/\\\\\\w]*))?)$/;\n\nexport class NewMovie extends Component {\n  state = {\n    values: {\n      title: '',\n      description: '',\n      imgUrl: '',\n      imdbUrl: '',\n      imdbId: '',\n    },\n    controlers: {\n      isValidTitle: true,\n      isValidImgUrl: true,\n      isValidImdbUrl: true,\n      isValidImdbId: true,\n    },\n  };\n\n  handleChange = (event) => {\n    const { value, name } = event.target;\n\n    this.setState(state => ({\n      values: {\n        ...state.values,\n        [name]: value,\n      },\n    }));\n  }\n\n  handleSubmit = (event) => {\n    event.preventDefault();\n\n    this.props.addMovie(this.state.values);\n\n    this.setState({\n      values: {\n        title: '',\n        description: '',\n        imgUrl: '',\n        imdbUrl: '',\n        imdbId: '',\n      },\n    });\n  }\n\n  handleBlur = (event) => {\n    const { name, value } = event.target;\n    const { controlers } = this.state;\n    const controler = `isValid${name[0].toUpperCase()}${name.slice(1)}`;\n    const isControler = Object\n      .prototype\n      .hasOwnProperty\n      .call(controlers, controler);\n\n    if (!isControler) {\n      return;\n    }\n\n    this.setState(state => ({\n      controlers: {\n        ...state.controlers,\n        [controler]: controler.includes('Url')\n          ? regex.test(value) && !!value\n          : !!value,\n      },\n    }));\n  }\n\n  hasFailedControlers = () => {\n    return Object.values(this.state.controlers).some(value => !value);\n  }\n\n  render() {\n    const {\n      controlers: {\n        isValidTitle,\n        isValidImgUrl,\n        isValidImdbUrl,\n        isValidImdbId,\n      },\n      values: {\n        title,\n        description,\n        imgUrl,\n        imdbUrl,\n        imdbId,\n      },\n    } = this.state;\n\n    return (\n      <form onSubmit={this.handleSubmit}>\n        <h3 className=\"form-group row\">Add film</h3>\n        <FormInput\n          name=\"title\"\n          value={title}\n          handleChange={this.handleChange}\n          handleBlur={this.handleBlur}\n          isValid={isValidTitle}\n        />\n        <FormInput\n          name=\"description\"\n          value={description}\n          handleChange={this.handleChange}\n          handleBlur={this.handleBlur}\n        />\n        <FormInput\n          name=\"imgUrl\"\n          value={imgUrl}\n          handleChange={this.handleChange}\n          handleBlur={this.handleBlur}\n          isValid={isValidImgUrl}\n        />\n        <FormInput\n          name=\"imdbUrl\"\n          value={imdbUrl}\n          handleChange={this.handleChange}\n          handleBlur={this.handleBlur}\n          isValid={isValidImdbUrl}\n        />\n        <FormInput\n          name=\"imdbId\"\n          value={imdbId}\n          handleChange={this.handleChange}\n          handleBlur={this.handleBlur}\n          isValid={isValidImdbId}\n        />\n\n        <button\n          type=\"submit\"\n          className=\"btn btn-primary form-group row\"\n          disabled={\n            !imdbId\n            || !imdbUrl\n            || !imgUrl\n            || !title\n            || this.hasFailedControlers()\n          }\n        >\n          Add film\n        </button>\n      </form>\n    );\n  }\n}\n\nNewMovie.propTypes = NewMovieProps;\n","import React, { Component } from 'react';\nimport './App.scss';\nimport { MoviesList } from './components/MoviesList';\nimport { NewMovie } from './components/NewMovie';\nimport moviesFromServer from './api/movies.json';\n\nexport class App extends Component {\n  state = {\n    movies: moviesFromServer,\n  };\n\n  addMovie = (movie) => {\n    this.setState(state => ({\n      movies: [...state.movies, movie],\n    }));\n  };\n\n  render() {\n    const { movies } = this.state;\n\n    return (\n      <div className=\"page\">\n        <div className=\"page-content\">\n          <MoviesList movies={movies} />\n        </div>\n        <div className=\"sidebar\">\n          <NewMovie addMovie={this.addMovie} />\n        </div>\n      </div>\n    );\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport 'bulma/css/bulma.css';\r\nimport { App } from './App';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n"],"sourceRoot":""}